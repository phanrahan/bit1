from magma.bitutils import clog2
from bit1.asm import assemble, disassemble, compile

N = 32
LOGN = clog2(N)

NI = 2
LOGNI = clog2(NI)

NO = 2
LOGNO = clog2(NO) + 1

def prog():
    org(0)
    equ("start", 0)
    label("start")
    nop()
    delay(1)
    mov(  I0, O0 )
    not_( I0, O0 )
    and_( I0, I1, O0 )
    or_( I0, I1, O0 )
    xor( I0, I1, O0 )
    jump( 0 )
    if0( I0, 0 )
    if1( I0, 0 )
    ifelse( I0, 0, 0 )
    skipif0( I0 )
    skipif1( I0 )
    skip( )
    pause( I0 )
    out( I0, 0 )
    set( O0 )
    clr( O0 )
    halt( )


def test_asm():
    mem, seq, din, dout = assemble(prog, LOGN, LOGNI, LOGNO)
    print(mem)
    assert mem == [[[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 0], [0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]]
    disassemble(mem)
